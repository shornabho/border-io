const filesInput=document.querySelector("#filesInput"),fileChosenFilenames=document.querySelector("#file-chosen-filenames"),imageGallery=document.querySelector(".image-gallery"),inputImageCanvasList=document.querySelector(".input-image-canvas-list"),outputImageCanvasList=document.querySelector(".output-image-canvas-list"),downloadButton=document.querySelector("#download-button");function clearAllContents(){imageGallery.innerHTML="",inputImageCanvasList.innerHTML="",outputImageCanvasList.innerHTML=""}function setAllowDownload(downloadButtonState){downloadButton.disabled=!downloadButtonState}let zip;window.addEventListener("DOMContentLoaded",event=>{document.getElementById("preloader").style.display="none"}),downloadButton.addEventListener("click",event=>{zip&&zip.generateAsync({type:"blob"}).then(content=>{console.log("Generated!"),saveAs(content,"images.zip")})}),filesInput.addEventListener("change",event=>{clearAllContents(),setAllowDownload(!1),zip=new JSZip;const filesList=event.target.files,imagesFolder=zip.folder("images");let renderedFileCounter=0;const generateZipAndDownload=()=>{filesList.length};for(let i=0;i<filesList.length;i++){const file=filesList[i],fileName=file.name,fileImageElement=document.createElement("img");fileImageElement.src=URL.createObjectURL(file);const fileImageContainer=document.createElement("div");fileImageContainer.classList.add("col-md-4","p-4","d-flex","justify-content-center"),fileImageElement.classList.add("uploaded-image"),fileImageElement.setAttribute("id",`uploaded-image-${i}`),fileImageContainer.appendChild(fileImageElement),imageGallery.appendChild(fileImageContainer);const inputImageCanvasElement=document.createElement("canvas"),inputImageContext=inputImageCanvasElement.getContext("2d"),imageObject=new Image;imageObject.src=URL.createObjectURL(file),inputImageCanvasElement.classList.add("input-image-canvas"),inputImageCanvasElement.setAttribute("id",`input-image-canvas-${i}`),inputImageCanvasList.appendChild(inputImageCanvasElement);const outputImageCanvasElement=document.createElement("canvas");outputImageCanvasElement.classList.add("output-image-canvas"),outputImageCanvasElement.setAttribute("id",`output-image-canvas-${i}`),outputImageCanvasList.appendChild(outputImageCanvasElement),imageObject.onload=()=>{inputImageCanvasElement.width=imageObject.width,inputImageCanvasElement.height=imageObject.height,inputImageContext.drawImage(imageObject,0,0);const sourceImageMat=cv.imread(inputImageCanvasElement),borderWidth=Math.round(.05*sourceImageMat.size().height),destImageMat=new cv.Mat,colorScale=new cv.Scalar(255,255,255,255);cv.copyMakeBorder(sourceImageMat,destImageMat,borderWidth,borderWidth,borderWidth,borderWidth,cv.BORDER_CONSTANT,colorScale),cv.imshow(outputImageCanvasElement,destImageMat),sourceImageMat.delete(),destImageMat.delete();const outputURI=outputImageCanvasElement.toDataURL("image/png",1),base64Data=outputURI.split(";base64,")[1];imagesFolder.file(fileName,base64Data,{base64:!0}),renderedFileCounter++,renderedFileCounter===filesList.length&&setAllowDownload(!0)}}});